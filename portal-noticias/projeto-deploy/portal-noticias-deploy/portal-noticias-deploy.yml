apiVersion: v1
kind: Service
metadata:
  name: svc-portal-noticias
spec:
  type: NodePort
  ports:
    - port: 80 #porta que o serviço está rodando dentro do cluster
      #targetPort: 80 #porta que o container portal-noticias está rodando
      nodePort: 30000 #porta que será acessada extarnamente
  selector:
    app: portal-noticias
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: portal-configmap
data:
  IP_SISTEMA: http://192.168.49.2:30001 #URL da parte de notícias
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portal-noticias-deployment
spec: 
  template: 
    metadata: 
      name: portal-noticias
      labels: 
        app: portal-noticias
    spec: 
      containers:
        - name: portal-noticias-container
          image: aluracursos/portal-noticias:1
          ports:
            - containerPort: 80
          envFrom: 
            - configMapRef:
                name: portal-configmap
          livenessProbe: # Verificando se o container do pod portal-noticias está saudável
              httpGet: # tipo de requisição
                path: /
                port: 80 # porta do container 
              periodSeconds: 10 # A cada quantos segundos o livenessProbe deverá realizar a validação desse container? neste caso, a cada 10 segundos
              failureThreshold: 3 # definindo a quantidade de tentativa dos testes de validação do container antes de reiniciar-lo. 3 tentativas, após 3 tentativa e não ter nehum sucesso, ele vai ser reiniciado
              initialDelaySeconds: 20 # definindo um atraso inicial para realizar os testes, então assim que o container iniciar, vai começar a contagem de 20 segundos e após esses 20 segundos o livenesseProbe entrará em ação 
              # o livenessProbe possui códigos, códigos >= 200 e < 400 indica sucesso, e qualquer outro código >= 400 ou < 200 indica falha
          
          readinessProbe: # aguarda o container do pod portal-noticias está pronto para iniciar os testes
              httpGet: 
                path: /
                port: 80 
              periodSeconds: 10 
              failureThreshold: 5
              initialDelaySeconds: 20
          resources: # definindo o limite de CPU que esse container vai usar, se estourar este limite de CPU, o HPA vai criar mais um pod para suprir essa demanda.
            requests: 
              cpu: 10m # 10 milicore

  replicas: 3 # Cada pod, ou seja, esses 3 pods que serão criados terá este limite que de CPU
  selector:  
    matchLabels:  
      app: portal-noticias